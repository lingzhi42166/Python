""" 
计算机网络就是把各个计算机连接到一起，让网络中的计算机可以互相通信。
网络编程就是如何在程序中实现两台计算机的通信。

举个例子，当你使用浏览器访问新浪网时，你的计算机就和新浪的某台服务器通过互联网连接起来了，
然后，新浪的服务器把网页内容作为数据通过互联网传输到你的电脑上。

由于你的电脑上可能不止浏览器，还有QQ、Skype、Dropbox、邮件客户端等，不同的程序连接的别的计算机也会不同，
所以，更确切地说，网络通信是两台计算机上的两个进程之间的通信。
比如，浏览器进程和新浪服务器上的某个Web服务进程在通信，而QQ进程是和腾讯的某个服务器上的某个进程在通信。

实际上网络编程就是两个进程之间的通信，是建立在python程序本身的进程连接别的进程通信端口进行通信

进程间通信（Inter-Process Communication，IPC）的根本前提是能够唯一标示每个进程。
在本地主机的进程间通信中，可以用 PID（进程 ID）唯一标示每个进程，但 PID 只在本地唯一，
在网络中不同主机的 PID 则可能发生冲突，
因此采用「IP 地址 + 传输层协议 + 端口号」的方式唯一标示网络中的一个进程

UDP和TCP是tcp/ip五层模型传输层运行的重大协议


在本地主机的进程间通信中，可以用 PID（进程 ID）唯一标示每个进程
通过IP地址+传输层协议+端口 的方式唯一标示网络中的一个进程
Socket就提供了这个接口给我们

Socket编程:
  Network Socket（网络套接字）是计算机网络中进程间通信的数据流端点，广义上也代表操作系统提供的一种进程间通信机制。
  是计算机之间通信的程序接口(把我们的数据按照协议封包、解包)，网络编程的标准
  最初只是用来本地进程间的通信的
  Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”

  在python中主要使用socket模块支持TCP、UDP编程

  我们是工作在应用层的 Socket(套接字)就是帮助我们处理应用层以下的每一层 不需要我们去研究每一层协议封包解包 由socket处理(提供API)

  计算机之间通信是经过七层协议的,那么socket就帮我们把应用层以下的层 都帮我们封装成了接口
  我们只需要专注于自己的业务逻辑代码即可
  

网络编程中，服务器和客户端只认bytes
所以客户端发送数据的时候需要通过encode()将字符串转成bytes数据类型
服务器接收端 可以通过decode()将bytes转成str类型

UDP编程基本流程:
  服务端:
    1、通过socket.socket(ip协议,传输层协议)创建Socket对象指定ip协议和传输层协议
    2、通过socket.bing(服务器ip地址,进程端口) 绑定服务器地址和端口
    3、socket.recvfrom(bufsize)  接收数据 并指定bufsize 每次可接受数据的最大的字节数 返回一个元组(data,(host,port))
    4、socket.close() 关闭套接字，不再接收数据。
  客户端:
    1、通过socket.socket(ip协议,传输层协议)创建Socket对象指定ip协议和传输层协议 与服务端一致
    2、通过socket.sendto(data,addrs) 向元组addrs(host,port)发送data
    3、通过socket.close() 关闭套接字，不再向服务端发送数据

  缺点:
    容易丢包、数据到达顺序无保证、缺乏拥塞控制，我发给你了 你收不到 与我无关 你按什么顺序收到的也与我无关
  优点: 
    没有复杂的三次握手与四次挥手  效率高，适合在线点播，语音通话
"""