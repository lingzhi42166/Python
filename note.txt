python是一门跨平台解释型高级动态 强类型语言

解释：
  解释器 把程序文件作为输入 输入到解释器   解释器 读一句解释一句执行一句  直到解释完成 得到最终结果
  解释器向操作系统发起系统调用 操作硬件 把文件从硬盘读取到内存 然后把整个文件作为输入给解释器 
编译：
  编译器 把程序文件完全等价的翻译成机器指令文件  生成执行文件


动态类型语言:
  运行期间才会做数据类型检查的语言，不用给变量指定数据类型  如 Javascript 
静态类型语言:
  编译的时候就检查数据类型，也就是写程序的时候必须指定变量的数据类型  如 C 

强类型语言:
  强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。如 C
弱类型语言:
  一个变量可以赋不同数据类型  随时都可以改变变量的数据类型 如 javascript



python的sys模块提供了大量于系统编程有关的接口 所以我们可以跟C一样操作很多有趣的事

命令行 输入 python  就启动了交互模式  然后就能看到>>>提示符  在提示符后面输入命令回车 就会执行



垃圾回收机制:
  回收不可用变量值所占用的内存空间
  python自带垃圾回收机制
  为什么要有垃圾回收机制:
    程序运行的时候 系统会在内存中分配一块内存空间 给用户
     变量值为数据 会在堆中申请一块内存存储  变量名指向数据地址  如果变量名引用这个内存地址 那么这个值就没有被引用 没有人用它 它就是垃圾
     不回收 占用内存空间 导致内存溢出




执行 python XX.py 后，将会启动 Python 的解释器
python解释器的编译器会将.py源文件编译（解释）成字节码生成PyCodeObject字节码对象存放在内存中。
python解释器的虚拟机将执行内存中的字节码对象转化为机器语言，虚拟机与操作系统交互，使机器语言在机器硬件上运行。
运行结束后python解释器则将PyCodeObject写回到pyc文件中。当python程序第二次运行时，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。



python有小整数池的概念


装饰器:
  定义一个函数 该函数是为别的函数提供新的功能的

  开放封闭原则:
    开放:对扩展功能是开放的
    封闭:对源代码修改是封闭的
    
命名空间(名称空间):
  对象具有个性，多个名称（在多个作用域内）可以绑定到同一个对象
  一个从名字到对象的映射。 大部分命名空间当前都由 Python 字典实现
  一个 作用域 是一个命名空间

  不同命名空间中的名称之间绝对没有关系,
    object1 = {   object1命名空间
      'a' : 'a'
    }
    object2 = {  object2命名空间
      'a' : 'a'
    }
    对象的属性集合也是一种命名空间的形式
    object3 = {
      ob1 : object1
      ob2 : object2
    }